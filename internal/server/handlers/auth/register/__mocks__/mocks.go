// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package register_mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockRegisterer creates a new instance of MockRegisterer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRegisterer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRegisterer {
	mock := &MockRegisterer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRegisterer is an autogenerated mock type for the Registerer type
type MockRegisterer struct {
	mock.Mock
}

type MockRegisterer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRegisterer) EXPECT() *MockRegisterer_Expecter {
	return &MockRegisterer_Expecter{mock: &_m.Mock}
}

// Register provides a mock function for the type MockRegisterer
func (_mock *MockRegisterer) Register(ctx context.Context, login string, email string, password string) (string, error) {
	ret := _mock.Called(ctx, login, email, password)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) (string, error)); ok {
		return returnFunc(ctx, login, email, password)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) string); ok {
		r0 = returnFunc(ctx, login, email, password)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = returnFunc(ctx, login, email, password)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRegisterer_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockRegisterer_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - login string
//   - email string
//   - password string
func (_e *MockRegisterer_Expecter) Register(ctx interface{}, login interface{}, email interface{}, password interface{}) *MockRegisterer_Register_Call {
	return &MockRegisterer_Register_Call{Call: _e.mock.On("Register", ctx, login, email, password)}
}

func (_c *MockRegisterer_Register_Call) Run(run func(ctx context.Context, login string, email string, password string)) *MockRegisterer_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockRegisterer_Register_Call) Return(s string, err error) *MockRegisterer_Register_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockRegisterer_Register_Call) RunAndReturn(run func(ctx context.Context, login string, email string, password string) (string, error)) *MockRegisterer_Register_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTokenCreator creates a new instance of MockTokenCreator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTokenCreator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTokenCreator {
	mock := &MockTokenCreator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTokenCreator is an autogenerated mock type for the TokenCreator type
type MockTokenCreator struct {
	mock.Mock
}

type MockTokenCreator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTokenCreator) EXPECT() *MockTokenCreator_Expecter {
	return &MockTokenCreator_Expecter{mock: &_m.Mock}
}

// CreateToken provides a mock function for the type MockTokenCreator
func (_mock *MockTokenCreator) CreateToken(ctx context.Context, userId string, tokenType string) (string, error) {
	ret := _mock.Called(ctx, userId, tokenType)

	if len(ret) == 0 {
		panic("no return value specified for CreateToken")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return returnFunc(ctx, userId, tokenType)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = returnFunc(ctx, userId, tokenType)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, userId, tokenType)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTokenCreator_CreateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateToken'
type MockTokenCreator_CreateToken_Call struct {
	*mock.Call
}

// CreateToken is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
//   - tokenType string
func (_e *MockTokenCreator_Expecter) CreateToken(ctx interface{}, userId interface{}, tokenType interface{}) *MockTokenCreator_CreateToken_Call {
	return &MockTokenCreator_CreateToken_Call{Call: _e.mock.On("CreateToken", ctx, userId, tokenType)}
}

func (_c *MockTokenCreator_CreateToken_Call) Run(run func(ctx context.Context, userId string, tokenType string)) *MockTokenCreator_CreateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTokenCreator_CreateToken_Call) Return(s string, err error) *MockTokenCreator_CreateToken_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockTokenCreator_CreateToken_Call) RunAndReturn(run func(ctx context.Context, userId string, tokenType string) (string, error)) *MockTokenCreator_CreateToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVerificationSender creates a new instance of MockVerificationSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVerificationSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVerificationSender {
	mock := &MockVerificationSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockVerificationSender is an autogenerated mock type for the VerificationSender type
type MockVerificationSender struct {
	mock.Mock
}

type MockVerificationSender_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVerificationSender) EXPECT() *MockVerificationSender_Expecter {
	return &MockVerificationSender_Expecter{mock: &_m.Mock}
}

// SendVerification provides a mock function for the type MockVerificationSender
func (_mock *MockVerificationSender) SendVerification(to string, token string, login string) error {
	ret := _mock.Called(to, token, login)

	if len(ret) == 0 {
		panic("no return value specified for SendVerification")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = returnFunc(to, token, login)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockVerificationSender_SendVerification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendVerification'
type MockVerificationSender_SendVerification_Call struct {
	*mock.Call
}

// SendVerification is a helper method to define mock.On call
//   - to string
//   - token string
//   - login string
func (_e *MockVerificationSender_Expecter) SendVerification(to interface{}, token interface{}, login interface{}) *MockVerificationSender_SendVerification_Call {
	return &MockVerificationSender_SendVerification_Call{Call: _e.mock.On("SendVerification", to, token, login)}
}

func (_c *MockVerificationSender_SendVerification_Call) Run(run func(to string, token string, login string)) *MockVerificationSender_SendVerification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockVerificationSender_SendVerification_Call) Return(err error) *MockVerificationSender_SendVerification_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockVerificationSender_SendVerification_Call) RunAndReturn(run func(to string, token string, login string) error) *MockVerificationSender_SendVerification_Call {
	_c.Call.Return(run)
	return _c
}
