// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package category_service_mocks

import (
	"context"

	"github.com/AlexMickh/coledzh-shop-backend/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// AllCategories provides a mock function for the type MockRepository
func (_mock *MockRepository) AllCategories(ctx context.Context) ([]models.Category, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for AllCategories")
	}

	var r0 []models.Category
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]models.Category, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []models.Category); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Category)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_AllCategories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllCategories'
type MockRepository_AllCategories_Call struct {
	*mock.Call
}

// AllCategories is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRepository_Expecter) AllCategories(ctx interface{}) *MockRepository_AllCategories_Call {
	return &MockRepository_AllCategories_Call{Call: _e.mock.On("AllCategories", ctx)}
}

func (_c *MockRepository_AllCategories_Call) Run(run func(ctx context.Context)) *MockRepository_AllCategories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepository_AllCategories_Call) Return(categorys []models.Category, err error) *MockRepository_AllCategories_Call {
	_c.Call.Return(categorys, err)
	return _c
}

func (_c *MockRepository_AllCategories_Call) RunAndReturn(run func(ctx context.Context) ([]models.Category, error)) *MockRepository_AllCategories_Call {
	_c.Call.Return(run)
	return _c
}

// SaveCategory provides a mock function for the type MockRepository
func (_mock *MockRepository) SaveCategory(ctx context.Context, id string, name string) error {
	ret := _mock.Called(ctx, id, name)

	if len(ret) == 0 {
		panic("no return value specified for SaveCategory")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, id, name)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_SaveCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveCategory'
type MockRepository_SaveCategory_Call struct {
	*mock.Call
}

// SaveCategory is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - name string
func (_e *MockRepository_Expecter) SaveCategory(ctx interface{}, id interface{}, name interface{}) *MockRepository_SaveCategory_Call {
	return &MockRepository_SaveCategory_Call{Call: _e.mock.On("SaveCategory", ctx, id, name)}
}

func (_c *MockRepository_SaveCategory_Call) Run(run func(ctx context.Context, id string, name string)) *MockRepository_SaveCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRepository_SaveCategory_Call) Return(err error) *MockRepository_SaveCategory_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_SaveCategory_Call) RunAndReturn(run func(ctx context.Context, id string, name string) error) *MockRepository_SaveCategory_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCash creates a new instance of MockCash. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCash(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCash {
	mock := &MockCash{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCash is an autogenerated mock type for the Cash type
type MockCash struct {
	mock.Mock
}

type MockCash_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCash) EXPECT() *MockCash_Expecter {
	return &MockCash_Expecter{mock: &_m.Mock}
}

// AllCategories provides a mock function for the type MockCash
func (_mock *MockCash) AllCategories(ctx context.Context) ([]models.Category, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for AllCategories")
	}

	var r0 []models.Category
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]models.Category, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []models.Category); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Category)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCash_AllCategories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllCategories'
type MockCash_AllCategories_Call struct {
	*mock.Call
}

// AllCategories is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCash_Expecter) AllCategories(ctx interface{}) *MockCash_AllCategories_Call {
	return &MockCash_AllCategories_Call{Call: _e.mock.On("AllCategories", ctx)}
}

func (_c *MockCash_AllCategories_Call) Run(run func(ctx context.Context)) *MockCash_AllCategories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCash_AllCategories_Call) Return(categorys []models.Category, err error) *MockCash_AllCategories_Call {
	_c.Call.Return(categorys, err)
	return _c
}

func (_c *MockCash_AllCategories_Call) RunAndReturn(run func(ctx context.Context) ([]models.Category, error)) *MockCash_AllCategories_Call {
	_c.Call.Return(run)
	return _c
}

// SaveCategory provides a mock function for the type MockCash
func (_mock *MockCash) SaveCategory(ctx context.Context, categoty models.Category) error {
	ret := _mock.Called(ctx, categoty)

	if len(ret) == 0 {
		panic("no return value specified for SaveCategory")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.Category) error); ok {
		r0 = returnFunc(ctx, categoty)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCash_SaveCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveCategory'
type MockCash_SaveCategory_Call struct {
	*mock.Call
}

// SaveCategory is a helper method to define mock.On call
//   - ctx context.Context
//   - categoty models.Category
func (_e *MockCash_Expecter) SaveCategory(ctx interface{}, categoty interface{}) *MockCash_SaveCategory_Call {
	return &MockCash_SaveCategory_Call{Call: _e.mock.On("SaveCategory", ctx, categoty)}
}

func (_c *MockCash_SaveCategory_Call) Run(run func(ctx context.Context, categoty models.Category)) *MockCash_SaveCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 models.Category
		if args[1] != nil {
			arg1 = args[1].(models.Category)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCash_SaveCategory_Call) Return(err error) *MockCash_SaveCategory_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCash_SaveCategory_Call) RunAndReturn(run func(ctx context.Context, categoty models.Category) error) *MockCash_SaveCategory_Call {
	_c.Call.Return(run)
	return _c
}
