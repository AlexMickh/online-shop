// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package auth_service_mocks

import (
	"context"

	"github.com/AlexMickh/coledzh-shop-backend/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockStorage creates a new instance of MockStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorage {
	mock := &MockStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStorage is an autogenerated mock type for the Storage type
type MockStorage struct {
	mock.Mock
}

type MockStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorage) EXPECT() *MockStorage_Expecter {
	return &MockStorage_Expecter{mock: &_m.Mock}
}

// SaveAdmin provides a mock function for the type MockStorage
func (_mock *MockStorage) SaveAdmin(ctx context.Context, login string, email string, password string) error {
	ret := _mock.Called(ctx, login, email, password)

	if len(ret) == 0 {
		panic("no return value specified for SaveAdmin")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = returnFunc(ctx, login, email, password)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_SaveAdmin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveAdmin'
type MockStorage_SaveAdmin_Call struct {
	*mock.Call
}

// SaveAdmin is a helper method to define mock.On call
//   - ctx context.Context
//   - login string
//   - email string
//   - password string
func (_e *MockStorage_Expecter) SaveAdmin(ctx interface{}, login interface{}, email interface{}, password interface{}) *MockStorage_SaveAdmin_Call {
	return &MockStorage_SaveAdmin_Call{Call: _e.mock.On("SaveAdmin", ctx, login, email, password)}
}

func (_c *MockStorage_SaveAdmin_Call) Run(run func(ctx context.Context, login string, email string, password string)) *MockStorage_SaveAdmin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockStorage_SaveAdmin_Call) Return(err error) *MockStorage_SaveAdmin_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_SaveAdmin_Call) RunAndReturn(run func(ctx context.Context, login string, email string, password string) error) *MockStorage_SaveAdmin_Call {
	_c.Call.Return(run)
	return _c
}

// SaveUser provides a mock function for the type MockStorage
func (_mock *MockStorage) SaveUser(ctx context.Context, login string, email string, password string) (string, error) {
	ret := _mock.Called(ctx, login, email, password)

	if len(ret) == 0 {
		panic("no return value specified for SaveUser")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) (string, error)); ok {
		return returnFunc(ctx, login, email, password)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) string); ok {
		r0 = returnFunc(ctx, login, email, password)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = returnFunc(ctx, login, email, password)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_SaveUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveUser'
type MockStorage_SaveUser_Call struct {
	*mock.Call
}

// SaveUser is a helper method to define mock.On call
//   - ctx context.Context
//   - login string
//   - email string
//   - password string
func (_e *MockStorage_Expecter) SaveUser(ctx interface{}, login interface{}, email interface{}, password interface{}) *MockStorage_SaveUser_Call {
	return &MockStorage_SaveUser_Call{Call: _e.mock.On("SaveUser", ctx, login, email, password)}
}

func (_c *MockStorage_SaveUser_Call) Run(run func(ctx context.Context, login string, email string, password string)) *MockStorage_SaveUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockStorage_SaveUser_Call) Return(s string, err error) *MockStorage_SaveUser_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockStorage_SaveUser_Call) RunAndReturn(run func(ctx context.Context, login string, email string, password string) (string, error)) *MockStorage_SaveUser_Call {
	_c.Call.Return(run)
	return _c
}

// UserByEmail provides a mock function for the type MockStorage
func (_mock *MockStorage) UserByEmail(ctx context.Context, email string) (models.User, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for UserByEmail")
	}

	var r0 models.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (models.User, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) models.User); ok {
		r0 = returnFunc(ctx, email)
	} else {
		r0 = ret.Get(0).(models.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_UserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserByEmail'
type MockStorage_UserByEmail_Call struct {
	*mock.Call
}

// UserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockStorage_Expecter) UserByEmail(ctx interface{}, email interface{}) *MockStorage_UserByEmail_Call {
	return &MockStorage_UserByEmail_Call{Call: _e.mock.On("UserByEmail", ctx, email)}
}

func (_c *MockStorage_UserByEmail_Call) Run(run func(ctx context.Context, email string)) *MockStorage_UserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_UserByEmail_Call) Return(user models.User, err error) *MockStorage_UserByEmail_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockStorage_UserByEmail_Call) RunAndReturn(run func(ctx context.Context, email string) (models.User, error)) *MockStorage_UserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyEmail provides a mock function for the type MockStorage
func (_mock *MockStorage) VerifyEmail(ctx context.Context, id string) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for VerifyEmail")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_VerifyEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyEmail'
type MockStorage_VerifyEmail_Call struct {
	*mock.Call
}

// VerifyEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockStorage_Expecter) VerifyEmail(ctx interface{}, id interface{}) *MockStorage_VerifyEmail_Call {
	return &MockStorage_VerifyEmail_Call{Call: _e.mock.On("VerifyEmail", ctx, id)}
}

func (_c *MockStorage_VerifyEmail_Call) Run(run func(ctx context.Context, id string)) *MockStorage_VerifyEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_VerifyEmail_Call) Return(err error) *MockStorage_VerifyEmail_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_VerifyEmail_Call) RunAndReturn(run func(ctx context.Context, id string) error) *MockStorage_VerifyEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSessionStore creates a new instance of MockSessionStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSessionStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSessionStore {
	mock := &MockSessionStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSessionStore is an autogenerated mock type for the SessionStore type
type MockSessionStore struct {
	mock.Mock
}

type MockSessionStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSessionStore) EXPECT() *MockSessionStore_Expecter {
	return &MockSessionStore_Expecter{mock: &_m.Mock}
}

// SaveSession provides a mock function for the type MockSessionStore
func (_mock *MockSessionStore) SaveSession(ctx context.Context, id string, user models.User) error {
	ret := _mock.Called(ctx, id, user)

	if len(ret) == 0 {
		panic("no return value specified for SaveSession")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, models.User) error); ok {
		r0 = returnFunc(ctx, id, user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSessionStore_SaveSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveSession'
type MockSessionStore_SaveSession_Call struct {
	*mock.Call
}

// SaveSession is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - user models.User
func (_e *MockSessionStore_Expecter) SaveSession(ctx interface{}, id interface{}, user interface{}) *MockSessionStore_SaveSession_Call {
	return &MockSessionStore_SaveSession_Call{Call: _e.mock.On("SaveSession", ctx, id, user)}
}

func (_c *MockSessionStore_SaveSession_Call) Run(run func(ctx context.Context, id string, user models.User)) *MockSessionStore_SaveSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 models.User
		if args[2] != nil {
			arg2 = args[2].(models.User)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSessionStore_SaveSession_Call) Return(err error) *MockSessionStore_SaveSession_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSessionStore_SaveSession_Call) RunAndReturn(run func(ctx context.Context, id string, user models.User) error) *MockSessionStore_SaveSession_Call {
	_c.Call.Return(run)
	return _c
}
