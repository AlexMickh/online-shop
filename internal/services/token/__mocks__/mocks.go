// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package token_service_mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockStorage creates a new instance of MockStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorage {
	mock := &MockStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStorage is an autogenerated mock type for the Storage type
type MockStorage struct {
	mock.Mock
}

type MockStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorage) EXPECT() *MockStorage_Expecter {
	return &MockStorage_Expecter{mock: &_m.Mock}
}

// SaveToken provides a mock function for the type MockStorage
func (_mock *MockStorage) SaveToken(ctx context.Context, userId string, token string, tokenType string) error {
	ret := _mock.Called(ctx, userId, token, tokenType)

	if len(ret) == 0 {
		panic("no return value specified for SaveToken")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = returnFunc(ctx, userId, token, tokenType)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_SaveToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveToken'
type MockStorage_SaveToken_Call struct {
	*mock.Call
}

// SaveToken is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
//   - token string
//   - tokenType string
func (_e *MockStorage_Expecter) SaveToken(ctx interface{}, userId interface{}, token interface{}, tokenType interface{}) *MockStorage_SaveToken_Call {
	return &MockStorage_SaveToken_Call{Call: _e.mock.On("SaveToken", ctx, userId, token, tokenType)}
}

func (_c *MockStorage_SaveToken_Call) Run(run func(ctx context.Context, userId string, token string, tokenType string)) *MockStorage_SaveToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockStorage_SaveToken_Call) Return(err error) *MockStorage_SaveToken_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_SaveToken_Call) RunAndReturn(run func(ctx context.Context, userId string, token string, tokenType string) error) *MockStorage_SaveToken_Call {
	_c.Call.Return(run)
	return _c
}

// UserIdByToken provides a mock function for the type MockStorage
func (_mock *MockStorage) UserIdByToken(ctx context.Context, token string, tokenType string) (string, error) {
	ret := _mock.Called(ctx, token, tokenType)

	if len(ret) == 0 {
		panic("no return value specified for UserIdByToken")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return returnFunc(ctx, token, tokenType)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = returnFunc(ctx, token, tokenType)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, token, tokenType)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_UserIdByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserIdByToken'
type MockStorage_UserIdByToken_Call struct {
	*mock.Call
}

// UserIdByToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - tokenType string
func (_e *MockStorage_Expecter) UserIdByToken(ctx interface{}, token interface{}, tokenType interface{}) *MockStorage_UserIdByToken_Call {
	return &MockStorage_UserIdByToken_Call{Call: _e.mock.On("UserIdByToken", ctx, token, tokenType)}
}

func (_c *MockStorage_UserIdByToken_Call) Run(run func(ctx context.Context, token string, tokenType string)) *MockStorage_UserIdByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockStorage_UserIdByToken_Call) Return(s string, err error) *MockStorage_UserIdByToken_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockStorage_UserIdByToken_Call) RunAndReturn(run func(ctx context.Context, token string, tokenType string) (string, error)) *MockStorage_UserIdByToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserService creates a new instance of MockUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserService is an autogenerated mock type for the UserService type
type MockUserService struct {
	mock.Mock
}

type MockUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserService) EXPECT() *MockUserService_Expecter {
	return &MockUserService_Expecter{mock: &_m.Mock}
}

// VerifyEmail provides a mock function for the type MockUserService
func (_mock *MockUserService) VerifyEmail(ctx context.Context, id string) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for VerifyEmail")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserService_VerifyEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyEmail'
type MockUserService_VerifyEmail_Call struct {
	*mock.Call
}

// VerifyEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockUserService_Expecter) VerifyEmail(ctx interface{}, id interface{}) *MockUserService_VerifyEmail_Call {
	return &MockUserService_VerifyEmail_Call{Call: _e.mock.On("VerifyEmail", ctx, id)}
}

func (_c *MockUserService_VerifyEmail_Call) Run(run func(ctx context.Context, id string)) *MockUserService_VerifyEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserService_VerifyEmail_Call) Return(err error) *MockUserService_VerifyEmail_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserService_VerifyEmail_Call) RunAndReturn(run func(ctx context.Context, id string) error) *MockUserService_VerifyEmail_Call {
	_c.Call.Return(run)
	return _c
}
